% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cocoSuiteRunOptimizer.R
\name{cocoSuiteRunOptimizer}
\alias{cocoSuiteRunOptimizer}
\title{Run optimizer on complete coco suite.}
\usage{
cocoSuiteRunOptimizer(suite, optimizer, observer = NULL, name = NULL,
  show.info = TRUE, ...)
}
\arguments{
\item{suite}{[\code{\link{CocoSuite}}]\cr
Coco problem suite.}

\item{optimizer}{[\code{function(fn, problem, ...)}]\cr
Runs an optimizer on a coco problem, verly likely a mini-wrapper for your optimizer of choice.
\code{fn} is the R function to optimize, with signature \code{function(x)}, where \code{x} is the numeric vector to evaluate at.
\code{problem} is a \code{link{CocoProblem}} that the optimizer can access for box constraints, initial solution and other info (or ignore).
The dotargs \code{...} are further arguments from above that should be passed on to the optimizer.}

\item{observer}{[\code{\link{CocoObserver}}]\cr
Optional \code{\link{CocoObserver}}.
Default to the default observer for the suite, e.g., \dQuote{bbob} for suite \dQuote{bbob}.}

\item{name}{[\code{character(1)}]\cr
Name of the \code{optimizer}.}

\item{show.info}{[\code{logical(1)}]\cr
Print short log message for each problem?
Default is \code{TRUE}.}

\item{\ldots}{[any]\cr
Passed down to \code{optimizer}.}
}
\value{
[\code{list}]. List of results for individual \code{\link{cocoRunOptimizer}} calls.
  List is named with coco problem ids.
}
\description{
The function is mainly called for its side effect of coco logging of results on disk.
It is expected that the caller opens the suite with \code{\link{cocoOpenSuite}} and closes the
suite with \code{\link{cocoCloseSuite}}.
This function can be parallelized via various back-ends, e.g., multicore, via \pkg{parallelMap}.
For details on the usage see the [parallelMap github page](https://github.com/berndbischl/parallelMap#readme),
which offers a nice tutorial and describes all possible back-ends thoroughly.
}
\examples{
# init test suite
suite = cocoOpenSuite("bbob", instances = 10:13, dims = c(2, 3), inst.inds = 1:3)

# set up observer
observer = cocoInitObserver("bbob", result.folder = "R_NelderMead")

# simple wrapper for Nelder-Mead
cocoOptimizerNelderMead = function(fn, problem, ...) {
  optim(par = problem$initial.solution, fn = fn, method = "Nelder-Mead", ...)
}

res = cocoSuiteRunOptimizer(suite, cocoOptimizerNelderMead, observer)
cocoCloseSuite(suite)
}
